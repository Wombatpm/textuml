/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.internal.frontend.textuml.analysis;

import java.util.*;
import com.abstratt.mdd.internal.frontend.textuml.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAStart(AStart node)
    {
        defaultCase(node);
    }

    public void caseAPackageHeading(APackageHeading node)
    {
        defaultCase(node);
    }

    public void caseAModelPackageType(AModelPackageType node)
    {
        defaultCase(node);
    }

    public void caseAProfilePackageType(AProfilePackageType node)
    {
        defaultCase(node);
    }

    public void caseAPackagePackageType(APackagePackageType node)
    {
        defaultCase(node);
    }

    public void caseAQualifiedIdentifier(AQualifiedIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAForcefullyQualifiedIdentifier(AForcefullyQualifiedIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAQualifiedIdentifierBase(AQualifiedIdentifierBase node)
    {
        defaultCase(node);
    }

    public void caseAQualifiedIdentifierTail(AQualifiedIdentifierTail node)
    {
        defaultCase(node);
    }

    public void caseAGlobalDirectiveSection(AGlobalDirectiveSection node)
    {
        defaultCase(node);
    }

    public void caseALoadGlobalDirective(ALoadGlobalDirective node)
    {
        defaultCase(node);
    }

    public void caseAApplyGlobalDirective(AApplyGlobalDirective node)
    {
        defaultCase(node);
    }

    public void caseAImportGlobalDirective(AImportGlobalDirective node)
    {
        defaultCase(node);
    }

    public void caseALoadDecl(ALoadDecl node)
    {
        defaultCase(node);
    }

    public void caseAApplyProfileDecl(AApplyProfileDecl node)
    {
        defaultCase(node);
    }

    public void caseAImportDecl(AImportDecl node)
    {
        defaultCase(node);
    }

    public void caseAOptionalAlias(AOptionalAlias node)
    {
        defaultCase(node);
    }

    public void caseAEmptyOptionalAlias(AEmptyOptionalAlias node)
    {
        defaultCase(node);
    }

    public void caseANamespaceContents(ANamespaceContents node)
    {
        defaultCase(node);
    }

    public void caseASubNamespace(ASubNamespace node)
    {
        defaultCase(node);
    }

    public void caseATopLevelElement(ATopLevelElement node)
    {
        defaultCase(node);
    }

    public void caseAClassTopLevelElementChoice(AClassTopLevelElementChoice node)
    {
        defaultCase(node);
    }

    public void caseAAssociationTopLevelElementChoice(AAssociationTopLevelElementChoice node)
    {
        defaultCase(node);
    }

    public void caseAStereotypeTopLevelElementChoice(AStereotypeTopLevelElementChoice node)
    {
        defaultCase(node);
    }

    public void caseAOperationTopLevelElementChoice(AOperationTopLevelElementChoice node)
    {
        defaultCase(node);
    }

    public void caseAFunctionTopLevelElementChoice(AFunctionTopLevelElementChoice node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveTopLevelElementChoice(APrimitiveTopLevelElementChoice node)
    {
        defaultCase(node);
    }

    public void caseASubnamespaceTopLevelElementChoice(ASubnamespaceTopLevelElementChoice node)
    {
        defaultCase(node);
    }

    public void caseAMinimalTypeIdentifier(AMinimalTypeIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAQualifiedSingleTypeIdentifier(AQualifiedSingleTypeIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAAnySingleTypeIdentifier(AAnySingleTypeIdentifier node)
    {
        defaultCase(node);
    }

    public void caseATupleTypeSingleTypeIdentifier(ATupleTypeSingleTypeIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAMinimalTypeIdentifierList(AMinimalTypeIdentifierList node)
    {
        defaultCase(node);
    }

    public void caseAMinimalTypeIdentifierListTail(AMinimalTypeIdentifierListTail node)
    {
        defaultCase(node);
    }

    public void caseATypeIdentifier(ATypeIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAFunctionTypeIdentifier(AFunctionTypeIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAOptionalMultiplicity(AOptionalMultiplicity node)
    {
        defaultCase(node);
    }

    public void caseASingleMultiplicitySpec(ASingleMultiplicitySpec node)
    {
        defaultCase(node);
    }

    public void caseAIntervalMultiplicitySpec(AIntervalMultiplicitySpec node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicityConstraints(AMultiplicityConstraints node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicityConstraintList(AMultiplicityConstraintList node)
    {
        defaultCase(node);
    }

    public void caseAMultiplicityConstraintTail(AMultiplicityConstraintTail node)
    {
        defaultCase(node);
    }

    public void caseAOrderedMultiplicityConstraint(AOrderedMultiplicityConstraint node)
    {
        defaultCase(node);
    }

    public void caseAUnorderedMultiplicityConstraint(AUnorderedMultiplicityConstraint node)
    {
        defaultCase(node);
    }

    public void caseAUniqueMultiplicityConstraint(AUniqueMultiplicityConstraint node)
    {
        defaultCase(node);
    }

    public void caseANonuniqueMultiplicityConstraint(ANonuniqueMultiplicityConstraint node)
    {
        defaultCase(node);
    }

    public void caseAOptionalFormalTemplateParameters(AOptionalFormalTemplateParameters node)
    {
        defaultCase(node);
    }

    public void caseAFormalTemplateParameterList(AFormalTemplateParameterList node)
    {
        defaultCase(node);
    }

    public void caseAFormalTemplateParameterTail(AFormalTemplateParameterTail node)
    {
        defaultCase(node);
    }

    public void caseAFormalTemplateParameter(AFormalTemplateParameter node)
    {
        defaultCase(node);
    }

    public void caseATemplateBinding(ATemplateBinding node)
    {
        defaultCase(node);
    }

    public void caseATemplateParameterList(ATemplateParameterList node)
    {
        defaultCase(node);
    }

    public void caseATemplateParameterTail(ATemplateParameterTail node)
    {
        defaultCase(node);
    }

    public void caseATemplateParameter(ATemplateParameter node)
    {
        defaultCase(node);
    }

    public void caseAAssociationDef(AAssociationDef node)
    {
        defaultCase(node);
    }

    public void caseAAssociationHeader(AAssociationHeader node)
    {
        defaultCase(node);
    }

    public void caseAAssociationAssociationKind(AAssociationAssociationKind node)
    {
        defaultCase(node);
    }

    public void caseAAggregationAssociationKind(AAggregationAssociationKind node)
    {
        defaultCase(node);
    }

    public void caseACompositionAssociationKind(ACompositionAssociationKind node)
    {
        defaultCase(node);
    }

    public void caseAAssociationRoleDeclList(AAssociationRoleDeclList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyAssociationRoleDeclList(AEmptyAssociationRoleDeclList node)
    {
        defaultCase(node);
    }

    public void caseAAssociationRoleDecl(AAssociationRoleDecl node)
    {
        defaultCase(node);
    }

    public void caseAOwnedAssociationEnd(AOwnedAssociationEnd node)
    {
        defaultCase(node);
    }

    public void caseAMemberAssociationEnd(AMemberAssociationEnd node)
    {
        defaultCase(node);
    }

    public void caseAAssociationOwnedEnd(AAssociationOwnedEnd node)
    {
        defaultCase(node);
    }

    public void caseAAssociationMemberEnd(AAssociationMemberEnd node)
    {
        defaultCase(node);
    }

    public void caseAAssociationModifiers(AAssociationModifiers node)
    {
        defaultCase(node);
    }

    public void caseAAssociationModifierList(AAssociationModifierList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyAssociationModifierList(AEmptyAssociationModifierList node)
    {
        defaultCase(node);
    }

    public void caseANavigableAssociationModifier(ANavigableAssociationModifier node)
    {
        defaultCase(node);
    }

    public void caseAClassDef(AClassDef node)
    {
        defaultCase(node);
    }

    public void caseAClassHeader(AClassHeader node)
    {
        defaultCase(node);
    }

    public void caseAClassModifiers(AClassModifiers node)
    {
        defaultCase(node);
    }

    public void caseAClassModifierList(AClassModifierList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyClassModifierList(AEmptyClassModifierList node)
    {
        defaultCase(node);
    }

    public void caseAAbstractClassModifier(AAbstractClassModifier node)
    {
        defaultCase(node);
    }

    public void caseAExternalClassModifier(AExternalClassModifier node)
    {
        defaultCase(node);
    }

    public void caseAClassClassType(AClassClassType node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceClassType(AInterfaceClassType node)
    {
        defaultCase(node);
    }

    public void caseADatatypeClassType(ADatatypeClassType node)
    {
        defaultCase(node);
    }

    public void caseAActorClassType(AActorClassType node)
    {
        defaultCase(node);
    }

    public void caseASignalClassType(ASignalClassType node)
    {
        defaultCase(node);
    }

    public void caseAComponentClassType(AComponentClassType node)
    {
        defaultCase(node);
    }

    public void caseAEnumerationClassType(AEnumerationClassType node)
    {
        defaultCase(node);
    }

    public void caseAClassImplementsSection(AClassImplementsSection node)
    {
        defaultCase(node);
    }

    public void caseAEmptyClassImplementsSection(AEmptyClassImplementsSection node)
    {
        defaultCase(node);
    }

    public void caseAClassImplementsList(AClassImplementsList node)
    {
        defaultCase(node);
    }

    public void caseAClassImplementsListTail(AClassImplementsListTail node)
    {
        defaultCase(node);
    }

    public void caseAClassImplementsItem(AClassImplementsItem node)
    {
        defaultCase(node);
    }

    public void caseAClassSpecializesSection(AClassSpecializesSection node)
    {
        defaultCase(node);
    }

    public void caseAEmptyClassSpecializesSection(AEmptyClassSpecializesSection node)
    {
        defaultCase(node);
    }

    public void caseAClassSpecializesList(AClassSpecializesList node)
    {
        defaultCase(node);
    }

    public void caseAClassSpecializesItem(AClassSpecializesItem node)
    {
        defaultCase(node);
    }

    public void caseAClassSpecializesListTail(AClassSpecializesListTail node)
    {
        defaultCase(node);
    }

    public void caseAFeatureDeclList(AFeatureDeclList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyFeatureDeclList(AEmptyFeatureDeclList node)
    {
        defaultCase(node);
    }

    public void caseAFeatureDecl(AFeatureDecl node)
    {
        defaultCase(node);
    }

    public void caseAModifiers(AModifiers node)
    {
        defaultCase(node);
    }

    public void caseAModifierList(AModifierList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyModifierList(AEmptyModifierList node)
    {
        defaultCase(node);
    }

    public void caseAVisibilityModifier(AVisibilityModifier node)
    {
        defaultCase(node);
    }

    public void caseAStaticModifier(AStaticModifier node)
    {
        defaultCase(node);
    }

    public void caseAAbstractModifier(AAbstractModifier node)
    {
        defaultCase(node);
    }

    public void caseADerivedModifier(ADerivedModifier node)
    {
        defaultCase(node);
    }

    public void caseAReadonlyModifier(AReadonlyModifier node)
    {
        defaultCase(node);
    }

    public void caseAIdModifier(AIdModifier node)
    {
        defaultCase(node);
    }

    public void caseAPublicVisibilityModifier(APublicVisibilityModifier node)
    {
        defaultCase(node);
    }

    public void caseAPrivateVisibilityModifier(APrivateVisibilityModifier node)
    {
        defaultCase(node);
    }

    public void caseAPackageVisibilityModifier(APackageVisibilityModifier node)
    {
        defaultCase(node);
    }

    public void caseAProtectedVisibilityModifier(AProtectedVisibilityModifier node)
    {
        defaultCase(node);
    }

    public void caseAStateMachineFeatureType(AStateMachineFeatureType node)
    {
        defaultCase(node);
    }

    public void caseAOperationFeatureType(AOperationFeatureType node)
    {
        defaultCase(node);
    }

    public void caseAAttributeFeatureType(AAttributeFeatureType node)
    {
        defaultCase(node);
    }

    public void caseALiteralFeatureType(ALiteralFeatureType node)
    {
        defaultCase(node);
    }

    public void caseAReferenceFeatureType(AReferenceFeatureType node)
    {
        defaultCase(node);
    }

    public void caseAReceptionFeatureType(AReceptionFeatureType node)
    {
        defaultCase(node);
    }

    public void caseAPortFeatureType(APortFeatureType node)
    {
        defaultCase(node);
    }

    public void caseADependencyFeatureType(ADependencyFeatureType node)
    {
        defaultCase(node);
    }

    public void caseAInvariantFeatureType(AInvariantFeatureType node)
    {
        defaultCase(node);
    }

    public void caseAConnectorFeatureType(AConnectorFeatureType node)
    {
        defaultCase(node);
    }

    public void caseAStateMachineDecl(AStateMachineDecl node)
    {
        defaultCase(node);
    }

    public void caseAStateDecl(AStateDecl node)
    {
        defaultCase(node);
    }

    public void caseAStateModifierList(AStateModifierList node)
    {
        defaultCase(node);
    }

    public void caseAInitialStateModifier(AInitialStateModifier node)
    {
        defaultCase(node);
    }

    public void caseATerminateStateModifier(ATerminateStateModifier node)
    {
        defaultCase(node);
    }

    public void caseAFinalStateModifier(AFinalStateModifier node)
    {
        defaultCase(node);
    }

    public void caseAStateBehavior(AStateBehavior node)
    {
        defaultCase(node);
    }

    public void caseADoStateBehaviorModifier(ADoStateBehaviorModifier node)
    {
        defaultCase(node);
    }

    public void caseAEntryStateBehaviorModifier(AEntryStateBehaviorModifier node)
    {
        defaultCase(node);
    }

    public void caseAExitStateBehaviorModifier(AExitStateBehaviorModifier node)
    {
        defaultCase(node);
    }

    public void caseANameStateBehaviorDefinition(ANameStateBehaviorDefinition node)
    {
        defaultCase(node);
    }

    public void caseABehaviorStateBehaviorDefinition(ABehaviorStateBehaviorDefinition node)
    {
        defaultCase(node);
    }

    public void caseATransitionDecl(ATransitionDecl node)
    {
        defaultCase(node);
    }

    public void caseATransitionGuard(ATransitionGuard node)
    {
        defaultCase(node);
    }

    public void caseATransitionEffect(ATransitionEffect node)
    {
        defaultCase(node);
    }

    public void caseATransitionTriggers(ATransitionTriggers node)
    {
        defaultCase(node);
    }

    public void caseATransitionTriggerTail(ATransitionTriggerTail node)
    {
        defaultCase(node);
    }

    public void caseAEmptyTransitionTriggerTail(AEmptyTransitionTriggerTail node)
    {
        defaultCase(node);
    }

    public void caseACallTransitionTrigger(ACallTransitionTrigger node)
    {
        defaultCase(node);
    }

    public void caseASignalTransitionTrigger(ASignalTransitionTrigger node)
    {
        defaultCase(node);
    }

    public void caseAAnyTransitionTrigger(AAnyTransitionTrigger node)
    {
        defaultCase(node);
    }

    public void caseAReceptionDecl(AReceptionDecl node)
    {
        defaultCase(node);
    }

    public void caseAOperationDecl(AOperationDecl node)
    {
        defaultCase(node);
    }

    public void caseAOperationPrecondition(AOperationPrecondition node)
    {
        defaultCase(node);
    }

    public void caseAPreconditionSignature(APreconditionSignature node)
    {
        defaultCase(node);
    }

    public void caseAConstraintException(AConstraintException node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierList(AIdentifierList node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierListTail(AIdentifierListTail node)
    {
        defaultCase(node);
    }

    public void caseAOperationHeader(AOperationHeader node)
    {
        defaultCase(node);
    }

    public void caseAOperationOperationKeyword(AOperationOperationKeyword node)
    {
        defaultCase(node);
    }

    public void caseAQueryOperationKeyword(AQueryOperationKeyword node)
    {
        defaultCase(node);
    }

    public void caseAWildcardTypes(AWildcardTypes node)
    {
        defaultCase(node);
    }

    public void caseAEmptyWildcardTypeTail(AEmptyWildcardTypeTail node)
    {
        defaultCase(node);
    }

    public void caseAWildcardTypeTail(AWildcardTypeTail node)
    {
        defaultCase(node);
    }

    public void caseAWildcardType(AWildcardType node)
    {
        defaultCase(node);
    }

    public void caseAOptionalBehavioralFeatureBody(AOptionalBehavioralFeatureBody node)
    {
        defaultCase(node);
    }

    public void caseAEmptyOptionalBehavioralFeatureBody(AEmptyOptionalBehavioralFeatureBody node)
    {
        defaultCase(node);
    }

    public void caseABehavioralFeatureBody(ABehavioralFeatureBody node)
    {
        defaultCase(node);
    }

    public void caseASimpleInitializationExpression(ASimpleInitializationExpression node)
    {
        defaultCase(node);
    }

    public void caseAComplexInitializationExpression(AComplexInitializationExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleInitialization(ASimpleInitialization node)
    {
        defaultCase(node);
    }

    public void caseAAttributeDecl(AAttributeDecl node)
    {
        defaultCase(node);
    }

    public void caseAAttributeInvariant(AAttributeInvariant node)
    {
        defaultCase(node);
    }

    public void caseAEnumerationLiteralDecl(AEnumerationLiteralDecl node)
    {
        defaultCase(node);
    }

    public void caseAEnumerationLiteralSlotValues(AEnumerationLiteralSlotValues node)
    {
        defaultCase(node);
    }

    public void caseAPortDecl(APortDecl node)
    {
        defaultCase(node);
    }

    public void caseAProvidedPortModifier(AProvidedPortModifier node)
    {
        defaultCase(node);
    }

    public void caseARequiredPortModifier(ARequiredPortModifier node)
    {
        defaultCase(node);
    }

    public void caseAPortConnector(APortConnector node)
    {
        defaultCase(node);
    }

    public void caseAConnectorDecl(AConnectorDecl node)
    {
        defaultCase(node);
    }

    public void caseAConnectorEndList(AConnectorEndList node)
    {
        defaultCase(node);
    }

    public void caseAConnectorEndListTail(AConnectorEndListTail node)
    {
        defaultCase(node);
    }

    public void caseAEmptyConnectorEndListTail(AEmptyConnectorEndListTail node)
    {
        defaultCase(node);
    }

    public void caseAPathConnectorEnd(APathConnectorEnd node)
    {
        defaultCase(node);
    }

    public void caseASimpleConnectorEnd(ASimpleConnectorEnd node)
    {
        defaultCase(node);
    }

    public void caseAInvariantKernel(AInvariantKernel node)
    {
        defaultCase(node);
    }

    public void caseAInvariantConstraintKeyword(AInvariantConstraintKeyword node)
    {
        defaultCase(node);
    }

    public void caseAAccessConstraintKeyword(AAccessConstraintKeyword node)
    {
        defaultCase(node);
    }

    public void caseAInvariantDecl(AInvariantDecl node)
    {
        defaultCase(node);
    }

    public void caseAReferenceDecl(AReferenceDecl node)
    {
        defaultCase(node);
    }

    public void caseAAssociationReferenceType(AAssociationReferenceType node)
    {
        defaultCase(node);
    }

    public void caseACompositionReferenceType(ACompositionReferenceType node)
    {
        defaultCase(node);
    }

    public void caseAAggregationReferenceType(AAggregationReferenceType node)
    {
        defaultCase(node);
    }

    public void caseADependencyDecl(ADependencyDecl node)
    {
        defaultCase(node);
    }

    public void caseAOptionalSubsetting(AOptionalSubsetting node)
    {
        defaultCase(node);
    }

    public void caseAEmptyOptionalSubsetting(AEmptyOptionalSubsetting node)
    {
        defaultCase(node);
    }

    public void caseAOptionalQualifier(AOptionalQualifier node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDecl(AFunctionDecl node)
    {
        defaultCase(node);
    }

    public void caseATupleType(ATupleType node)
    {
        defaultCase(node);
    }

    public void caseATupleTypeSlot(ATupleTypeSlot node)
    {
        defaultCase(node);
    }

    public void caseATupleTypeSlotTail(ATupleTypeSlotTail node)
    {
        defaultCase(node);
    }

    public void caseAEmptyTupleTypeSlotTail(AEmptyTupleTypeSlotTail node)
    {
        defaultCase(node);
    }

    public void caseAFunctionSignature(AFunctionSignature node)
    {
        defaultCase(node);
    }

    public void caseASignature(ASignature node)
    {
        defaultCase(node);
    }

    public void caseASimpleSignature(ASimpleSignature node)
    {
        defaultCase(node);
    }

    public void caseAOptionalReturnType(AOptionalReturnType node)
    {
        defaultCase(node);
    }

    public void caseASimpleOptionalReturnType(ASimpleOptionalReturnType node)
    {
        defaultCase(node);
    }

    public void caseAParamDeclList(AParamDeclList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyParamDeclList(AEmptyParamDeclList node)
    {
        defaultCase(node);
    }

    public void caseASimpleParamDeclList(ASimpleParamDeclList node)
    {
        defaultCase(node);
    }

    public void caseAEmptySimpleParamDeclList(AEmptySimpleParamDeclList node)
    {
        defaultCase(node);
    }

    public void caseAParamDeclListTail(AParamDeclListTail node)
    {
        defaultCase(node);
    }

    public void caseAEmptyParamDeclListTail(AEmptyParamDeclListTail node)
    {
        defaultCase(node);
    }

    public void caseASimpleParamDeclListTail(ASimpleParamDeclListTail node)
    {
        defaultCase(node);
    }

    public void caseAEmptySimpleParamDeclListTail(AEmptySimpleParamDeclListTail node)
    {
        defaultCase(node);
    }

    public void caseAParamDecl(AParamDecl node)
    {
        defaultCase(node);
    }

    public void caseASimpleParamDecl(ASimpleParamDecl node)
    {
        defaultCase(node);
    }

    public void caseAOptionalParameterName(AOptionalParameterName node)
    {
        defaultCase(node);
    }

    public void caseAParameterModifiers(AParameterModifiers node)
    {
        defaultCase(node);
    }

    public void caseAParameterModifierList(AParameterModifierList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyParameterModifierList(AEmptyParameterModifierList node)
    {
        defaultCase(node);
    }

    public void caseAInParameterModifier(AInParameterModifier node)
    {
        defaultCase(node);
    }

    public void caseAOutParameterModifier(AOutParameterModifier node)
    {
        defaultCase(node);
    }

    public void caseAInoutParameterModifier(AInoutParameterModifier node)
    {
        defaultCase(node);
    }

    public void caseAReadParameterModifier(AReadParameterModifier node)
    {
        defaultCase(node);
    }

    public void caseACreateParameterModifier(ACreateParameterModifier node)
    {
        defaultCase(node);
    }

    public void caseAUpdateParameterModifier(AUpdateParameterModifier node)
    {
        defaultCase(node);
    }

    public void caseADeleteParameterModifier(ADeleteParameterModifier node)
    {
        defaultCase(node);
    }

    public void caseAOptionalRaisesSection(AOptionalRaisesSection node)
    {
        defaultCase(node);
    }

    public void caseARaisedExceptionList(ARaisedExceptionList node)
    {
        defaultCase(node);
    }

    public void caseARaisedExceptionListTail(ARaisedExceptionListTail node)
    {
        defaultCase(node);
    }

    public void caseARaisedExceptionItem(ARaisedExceptionItem node)
    {
        defaultCase(node);
    }

    public void caseAAnnotations(AAnnotations node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationsWithBrackets(AAnnotationsWithBrackets node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationsWithGuillemots(AAnnotationsWithGuillemots node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationList(AAnnotationList node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationListTail(AAnnotationListTail node)
    {
        defaultCase(node);
    }

    public void caseAAnnotation(AAnnotation node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationOptionalValueSpecs(AAnnotationOptionalValueSpecs node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationValueSpecList(AAnnotationValueSpecList node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationValueSpecListTail(AAnnotationValueSpecListTail node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationValueSpec(AAnnotationValueSpec node)
    {
        defaultCase(node);
    }

    public void caseAAnnotationValue(AAnnotationValue node)
    {
        defaultCase(node);
    }

    public void caseAEnumeratedAnnotationValue(AEnumeratedAnnotationValue node)
    {
        defaultCase(node);
    }

    public void caseAStereotypeDef(AStereotypeDef node)
    {
        defaultCase(node);
    }

    public void caseAStereotypeDefHeader(AStereotypeDefHeader node)
    {
        defaultCase(node);
    }

    public void caseAStereotypeExtendsSection(AStereotypeExtendsSection node)
    {
        defaultCase(node);
    }

    public void caseAEmptyStereotypeExtendsSection(AEmptyStereotypeExtendsSection node)
    {
        defaultCase(node);
    }

    public void caseAStereotypeExtensionList(AStereotypeExtensionList node)
    {
        defaultCase(node);
    }

    public void caseAStereotypeExtensionListTail(AStereotypeExtensionListTail node)
    {
        defaultCase(node);
    }

    public void caseAStereotypeExtension(AStereotypeExtension node)
    {
        defaultCase(node);
    }

    public void caseAStereotypePropertyDecl(AStereotypePropertyDecl node)
    {
        defaultCase(node);
    }

    public void caseAOptionalDefault(AOptionalDefault node)
    {
        defaultCase(node);
    }

    public void caseAEmptyOptionalDefault(AEmptyOptionalDefault node)
    {
        defaultCase(node);
    }

    public void caseAPrimitiveDef(APrimitiveDef node)
    {
        defaultCase(node);
    }

    public void caseADetachedOperationDef(ADetachedOperationDef node)
    {
        defaultCase(node);
    }

    public void caseADetachedOperationHeader(ADetachedOperationHeader node)
    {
        defaultCase(node);
    }

    public void caseASimpleBlock(ASimpleBlock node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSimpleBlockResolved(AExpressionSimpleBlockResolved node)
    {
        defaultCase(node);
    }

    public void caseAStatementSimpleBlockResolved(AStatementSimpleBlockResolved node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpressionBlock(ASimpleExpressionBlock node)
    {
        defaultCase(node);
    }

    public void caseASimpleStatementBlock(ASimpleStatementBlock node)
    {
        defaultCase(node);
    }

    public void caseAWordyBlock(AWordyBlock node)
    {
        defaultCase(node);
    }

    public void caseAExpressionBlock(AExpressionBlock node)
    {
        defaultCase(node);
    }

    public void caseABlockKernel(ABlockKernel node)
    {
        defaultCase(node);
    }

    public void caseAVarDeclSection(AVarDeclSection node)
    {
        defaultCase(node);
    }

    public void caseAEmptyVarDeclSection(AEmptyVarDeclSection node)
    {
        defaultCase(node);
    }

    public void caseAVarDecl(AVarDecl node)
    {
        defaultCase(node);
    }

    public void caseAOptionalType(AOptionalType node)
    {
        defaultCase(node);
    }

    public void caseAVarListTail(AVarListTail node)
    {
        defaultCase(node);
    }

    public void caseAStatementSequence(AStatementSequence node)
    {
        defaultCase(node);
    }

    public void caseAStatement(AStatement node)
    {
        defaultCase(node);
    }

    public void caseANoIfStatementResolved(ANoIfStatementResolved node)
    {
        defaultCase(node);
    }

    public void caseAWithIfStatementResolved(AWithIfStatementResolved node)
    {
        defaultCase(node);
    }

    public void caseABlockNonIfStatement(ABlockNonIfStatement node)
    {
        defaultCase(node);
    }

    public void caseANonBlockNonIfStatement(ANonBlockNonIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAWriteClassAttributeSpecificStatement(AWriteClassAttributeSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseAWriteAttributeSpecificStatement(AWriteAttributeSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseAWriteVariableSpecificStatement(AWriteVariableSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseAExpressionSpecificStatement(AExpressionSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseAEmptyReturnSpecificStatement(AEmptyReturnSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseAValuedReturnSpecificStatement(AValuedReturnSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseALoopSpecificStatement(ALoopSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseALinkSpecificStatement(ALinkSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseAUnlinkSpecificStatement(AUnlinkSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseASendSpecificStatement(ASendSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseABroadcastSpecificStatement(ABroadcastSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseADestroySpecificStatement(ADestroySpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseARaiseSpecificStatement(ARaiseSpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseATrySpecificStatement(ATrySpecificStatement node)
    {
        defaultCase(node);
    }

    public void caseATryStatement(ATryStatement node)
    {
        defaultCase(node);
    }

    public void caseACatchSection(ACatchSection node)
    {
        defaultCase(node);
    }

    public void caseAFinallySection(AFinallySection node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfClause(AIfClause node)
    {
        defaultCase(node);
    }

    public void caseAElseifRestIf(AElseifRestIf node)
    {
        defaultCase(node);
    }

    public void caseAElseRestIf(AElseRestIf node)
    {
        defaultCase(node);
    }

    public void caseAEmptyRestIf(AEmptyRestIf node)
    {
        defaultCase(node);
    }

    public void caseAClauseBody(AClauseBody node)
    {
        defaultCase(node);
    }

    public void caseAWhileLoopStatement(AWhileLoopStatement node)
    {
        defaultCase(node);
    }

    public void caseARepeatLoopStatement(ARepeatLoopStatement node)
    {
        defaultCase(node);
    }

    public void caseALoopTest(ALoopTest node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileLoopBody(AWhileLoopBody node)
    {
        defaultCase(node);
    }

    public void caseARepeatStatement(ARepeatStatement node)
    {
        defaultCase(node);
    }

    public void caseARepeatLoopBody(ARepeatLoopBody node)
    {
        defaultCase(node);
    }

    public void caseAVariableIdentifierExpression(AVariableIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAClassAttributeIdentifierExpression(AClassAttributeIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAClassOperationIdentifierExpression(AClassOperationIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseANewIdentifierExpression(ANewIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseASelfIdentifierExpression(ASelfIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseALinkIdentifierExpression(ALinkIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAAttributeIdentifierExpression(AAttributeIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAOperationIdentifierExpression(AOperationIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAExtentIdentifierExpression(AExtentIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseAFunctionIdentifierExpression(AFunctionIdentifierExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleAssociationTraversal(ASimpleAssociationTraversal node)
    {
        defaultCase(node);
    }

    public void caseAQualifiedAssociationTraversal(AQualifiedAssociationTraversal node)
    {
        defaultCase(node);
    }

    public void caseAVariableAccess(AVariableAccess node)
    {
        defaultCase(node);
    }

    public void caseALinkRole(ALinkRole node)
    {
        defaultCase(node);
    }

    public void caseATarget(ATarget node)
    {
        defaultCase(node);
    }

    public void caseAClosure(AClosure node)
    {
        defaultCase(node);
    }

    public void caseANamedArgumentList(ANamedArgumentList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyNamedArgumentList(AEmptyNamedArgumentList node)
    {
        defaultCase(node);
    }

    public void caseANamedArgument(ANamedArgument node)
    {
        defaultCase(node);
    }

    public void caseANamedArgumentAdditional(ANamedArgumentAdditional node)
    {
        defaultCase(node);
    }

    public void caseANamedSimpleValueList(ANamedSimpleValueList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyNamedSimpleValueList(AEmptyNamedSimpleValueList node)
    {
        defaultCase(node);
    }

    public void caseANamedSimpleValue(ANamedSimpleValue node)
    {
        defaultCase(node);
    }

    public void caseANamedSimpleValueAdditional(ANamedSimpleValueAdditional node)
    {
        defaultCase(node);
    }

    public void caseAExpressionList(AExpressionList node)
    {
        defaultCase(node);
    }

    public void caseAEmptyExpressionList(AEmptyExpressionList node)
    {
        defaultCase(node);
    }

    public void caseAExpressionListTail(AExpressionListTail node)
    {
        defaultCase(node);
    }

    public void caseAExpressionListElement(AExpressionListElement node)
    {
        defaultCase(node);
    }

    public void caseARootExpression(ARootExpression node)
    {
        defaultCase(node);
    }

    public void caseAUnaryExpression(AUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseABinaryExpression(ABinaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAIsClassifiedExpression(AIsClassifiedExpression node)
    {
        defaultCase(node);
    }

    public void caseAOperandExpression(AOperandExpression node)
    {
        defaultCase(node);
    }

    public void caseAClosureExpression(AClosureExpression node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExpressionOperand(AIdentifierExpressionOperand node)
    {
        defaultCase(node);
    }

    public void caseALiteralOperand(ALiteralOperand node)
    {
        defaultCase(node);
    }

    public void caseAEmptySetOperand(AEmptySetOperand node)
    {
        defaultCase(node);
    }

    public void caseATupleOperand(ATupleOperand node)
    {
        defaultCase(node);
    }

    public void caseAParenthesisOperand(AParenthesisOperand node)
    {
        defaultCase(node);
    }

    public void caseAEmptySet(AEmptySet node)
    {
        defaultCase(node);
    }

    public void caseACast(ACast node)
    {
        defaultCase(node);
    }

    public void caseALogicalBinaryOperator(ALogicalBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAArithmeticBinaryOperator(AArithmeticBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAComparisonBinaryOperator(AComparisonBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAIdentityBinaryOperator(AIdentityBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAOrLogicalBinaryOperator(AOrLogicalBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAAndLogicalBinaryOperator(AAndLogicalBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAMultArithmeticBinaryOperator(AMultArithmeticBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseADivArithmeticBinaryOperator(ADivArithmeticBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAPlusArithmeticBinaryOperator(APlusArithmeticBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAMinusArithmeticBinaryOperator(AMinusArithmeticBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAEqualsComparisonBinaryOperator(AEqualsComparisonBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseANotEqualsComparisonBinaryOperator(ANotEqualsComparisonBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseALowerThanComparisonBinaryOperator(ALowerThanComparisonBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAGreaterThanComparisonBinaryOperator(AGreaterThanComparisonBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAGreaterOrEqualsComparisonBinaryOperator(AGreaterOrEqualsComparisonBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseALowerOrEqualsComparisonBinaryOperator(ALowerOrEqualsComparisonBinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseANotUnaryOperator(ANotUnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseANotNullUnaryOperator(ANotNullUnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseANumberLiteral(ANumberLiteral node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseANullLiteral(ANullLiteral node)
    {
        defaultCase(node);
    }

    public void caseASymbolLiteral(ASymbolLiteral node)
    {
        defaultCase(node);
    }

    public void caseATupleConstructor(ATupleConstructor node)
    {
        defaultCase(node);
    }

    public void caseATupleComponentValue(ATupleComponentValue node)
    {
        defaultCase(node);
    }

    public void caseATupleComponentValueTail(ATupleComponentValueTail node)
    {
        defaultCase(node);
    }

    public void caseALiteralLiteralOrIdentifier(ALiteralLiteralOrIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierLiteralOrIdentifier(AIdentifierLiteralOrIdentifier node)
    {
        defaultCase(node);
    }

    public void caseATrueBoolean(ATrueBoolean node)
    {
        defaultCase(node);
    }

    public void caseAFalseBoolean(AFalseBoolean node)
    {
        defaultCase(node);
    }

    public void caseAIntegerNumber(AIntegerNumber node)
    {
        defaultCase(node);
    }

    public void caseARealNumber(ARealNumber node)
    {
        defaultCase(node);
    }

    public void caseAIntegerMultiplicityValue(AIntegerMultiplicityValue node)
    {
        defaultCase(node);
    }

    public void caseAInfinityMultiplicityValue(AInfinityMultiplicityValue node)
    {
        defaultCase(node);
    }

    public void caseTAbstract(TAbstract node)
    {
        defaultCase(node);
    }

    public void caseTAccess(TAccess node)
    {
        defaultCase(node);
    }

    public void caseTActor(TActor node)
    {
        defaultCase(node);
    }

    public void caseTAggregation(TAggregation node)
    {
        defaultCase(node);
    }

    public void caseTAlias(TAlias node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTAny(TAny node)
    {
        defaultCase(node);
    }

    public void caseTApply(TApply node)
    {
        defaultCase(node);
    }

    public void caseTAssociation(TAssociation node)
    {
        defaultCase(node);
    }

    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    public void caseTAttribute(TAttribute node)
    {
        defaultCase(node);
    }

    public void caseTBegin(TBegin node)
    {
        defaultCase(node);
    }

    public void caseTBroadcast(TBroadcast node)
    {
        defaultCase(node);
    }

    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    public void caseTCall(TCall node)
    {
        defaultCase(node);
    }

    public void caseTCatch(TCatch node)
    {
        defaultCase(node);
    }

    public void caseTClazz(TClazz node)
    {
        defaultCase(node);
    }

    public void caseTCreate(TCreate node)
    {
        defaultCase(node);
    }

    public void caseTComponent(TComponent node)
    {
        defaultCase(node);
    }

    public void caseTComposition(TComposition node)
    {
        defaultCase(node);
    }

    public void caseTConnector(TConnector node)
    {
        defaultCase(node);
    }

    public void caseTDatatype(TDatatype node)
    {
        defaultCase(node);
    }

    public void caseTDelete(TDelete node)
    {
        defaultCase(node);
    }

    public void caseTDependency(TDependency node)
    {
        defaultCase(node);
    }

    public void caseTDerived(TDerived node)
    {
        defaultCase(node);
    }

    public void caseTDestroy(TDestroy node)
    {
        defaultCase(node);
    }

    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    public void caseTElseif(TElseif node)
    {
        defaultCase(node);
    }

    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    public void caseTEnumeration(TEnumeration node)
    {
        defaultCase(node);
    }

    public void caseTEntry(TEntry node)
    {
        defaultCase(node);
    }

    public void caseTExit(TExit node)
    {
        defaultCase(node);
    }

    public void caseTExtends(TExtends node)
    {
        defaultCase(node);
    }

    public void caseTExtent(TExtent node)
    {
        defaultCase(node);
    }

    public void caseTExternal(TExternal node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTFinal(TFinal node)
    {
        defaultCase(node);
    }

    public void caseTFinally(TFinally node)
    {
        defaultCase(node);
    }

    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    public void caseTImplements(TImplements node)
    {
        defaultCase(node);
    }

    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTInitial(TInitial node)
    {
        defaultCase(node);
    }

    public void caseTInout(TInout node)
    {
        defaultCase(node);
    }

    public void caseTInterface(TInterface node)
    {
        defaultCase(node);
    }

    public void caseTInvariant(TInvariant node)
    {
        defaultCase(node);
    }

    public void caseTIs(TIs node)
    {
        defaultCase(node);
    }

    public void caseTLink(TLink node)
    {
        defaultCase(node);
    }

    public void caseTEnumerationLiteral(TEnumerationLiteral node)
    {
        defaultCase(node);
    }

    public void caseTLoad(TLoad node)
    {
        defaultCase(node);
    }

    public void caseTModel(TModel node)
    {
        defaultCase(node);
    }

    public void caseTNavigable(TNavigable node)
    {
        defaultCase(node);
    }

    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    public void caseTNonunique(TNonunique node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTNull(TNull node)
    {
        defaultCase(node);
    }

    public void caseTOn(TOn node)
    {
        defaultCase(node);
    }

    public void caseTOperation(TOperation node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTOrdered(TOrdered node)
    {
        defaultCase(node);
    }

    public void caseTOut(TOut node)
    {
        defaultCase(node);
    }

    public void caseTPackage(TPackage node)
    {
        defaultCase(node);
    }

    public void caseTPort(TPort node)
    {
        defaultCase(node);
    }

    public void caseTPostcondition(TPostcondition node)
    {
        defaultCase(node);
    }

    public void caseTPrecondition(TPrecondition node)
    {
        defaultCase(node);
    }

    public void caseTPrimitive(TPrimitive node)
    {
        defaultCase(node);
    }

    public void caseTPrivate(TPrivate node)
    {
        defaultCase(node);
    }

    public void caseTProfile(TProfile node)
    {
        defaultCase(node);
    }

    public void caseTProperty(TProperty node)
    {
        defaultCase(node);
    }

    public void caseTProtected(TProtected node)
    {
        defaultCase(node);
    }

    public void caseTProvided(TProvided node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTQuery(TQuery node)
    {
        defaultCase(node);
    }

    public void caseTRaise(TRaise node)
    {
        defaultCase(node);
    }

    public void caseTRaises(TRaises node)
    {
        defaultCase(node);
    }

    public void caseTRead(TRead node)
    {
        defaultCase(node);
    }

    public void caseTReadonly(TReadonly node)
    {
        defaultCase(node);
    }

    public void caseTReception(TReception node)
    {
        defaultCase(node);
    }

    public void caseTReference(TReference node)
    {
        defaultCase(node);
    }

    public void caseTRepeat(TRepeat node)
    {
        defaultCase(node);
    }

    public void caseTRequired(TRequired node)
    {
        defaultCase(node);
    }

    public void caseTReturn(TReturn node)
    {
        defaultCase(node);
    }

    public void caseTRole(TRole node)
    {
        defaultCase(node);
    }

    public void caseTSelf(TSelf node)
    {
        defaultCase(node);
    }

    public void caseTSend(TSend node)
    {
        defaultCase(node);
    }

    public void caseTSignal(TSignal node)
    {
        defaultCase(node);
    }

    public void caseTSpecializes(TSpecializes node)
    {
        defaultCase(node);
    }

    public void caseTState(TState node)
    {
        defaultCase(node);
    }

    public void caseTStatemachine(TStatemachine node)
    {
        defaultCase(node);
    }

    public void caseTStatic(TStatic node)
    {
        defaultCase(node);
    }

    public void caseTStereotype(TStereotype node)
    {
        defaultCase(node);
    }

    public void caseTSubsets(TSubsets node)
    {
        defaultCase(node);
    }

    public void caseTTerminate(TTerminate node)
    {
        defaultCase(node);
    }

    public void caseTThen(TThen node)
    {
        defaultCase(node);
    }

    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    public void caseTTransition(TTransition node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTTry(TTry node)
    {
        defaultCase(node);
    }

    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    public void caseTUnique(TUnique node)
    {
        defaultCase(node);
    }

    public void caseTUnlink(TUnlink node)
    {
        defaultCase(node);
    }

    public void caseTUnordered(TUnordered node)
    {
        defaultCase(node);
    }

    public void caseTUntil(TUntil node)
    {
        defaultCase(node);
    }

    public void caseTUpdate(TUpdate node)
    {
        defaultCase(node);
    }

    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    public void caseTWhen(TWhen node)
    {
        defaultCase(node);
    }

    public void caseTWhere(TWhere node)
    {
        defaultCase(node);
    }

    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTAssignop(TAssignop node)
    {
        defaultCase(node);
    }

    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    public void caseTLab(TLab node)
    {
        defaultCase(node);
    }

    public void caseTRab(TRab node)
    {
        defaultCase(node);
    }

    public void caseTNotEquals(TNotEquals node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTNamespaceSeparator(TNamespaceSeparator node)
    {
        defaultCase(node);
    }

    public void caseTHash(THash node)
    {
        defaultCase(node);
    }

    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTLCurlyBracket(TLCurlyBracket node)
    {
        defaultCase(node);
    }

    public void caseTRCurlyBracket(TRCurlyBracket node)
    {
        defaultCase(node);
    }

    public void caseTRightArrow(TRightArrow node)
    {
        defaultCase(node);
    }

    public void caseTLeftArrow(TLeftArrow node)
    {
        defaultCase(node);
    }

    public void caseTLGuillemot(TLGuillemot node)
    {
        defaultCase(node);
    }

    public void caseTRGuillemot(TRGuillemot node)
    {
        defaultCase(node);
    }

    public void caseTNotNull(TNotNull node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTInteger(TInteger node)
    {
        defaultCase(node);
    }

    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTUri(TUri node)
    {
        defaultCase(node);
    }

    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    public void caseTModelComment(TModelComment node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
